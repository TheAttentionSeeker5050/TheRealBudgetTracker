{"ast":null,"code":"var _jsxFileName = \"/home/nicocaste/projects-web/budget-tracker1.1/TheRealBudgetTracker/BudgetTracker/frontend/src/Components/AppBody.js\";\nimport React, { useState } from \"react\";\nimport { EntriesLog, EntryItem } from './EntriesLog';\nimport { ChangeDateButtons } from \"./ChangeDateButtons\"; // the api rest framework\n\nimport axios from \"axios\";\n\nclass AppBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshList = () => {\n      axios.get(\"/api/entries/\").then(res => {\n        this.setState({\n          entryList: res.data\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      entryList: [],\n      modal: false,\n      startDate: \"\",\n      endDate: \"\",\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false\n      }\n    }; // this.date= new Date()\n  } // const entry_list = []\n  // we set this in order to render the component \n\n\n  componentDidMount() {\n    this.getDates();\n    this.refreshList();\n    console.log(\"rendering list\");\n  } // componentNeedsUpdate\n\n\n  getDates() {\n    const now = new Date(2021, 6, 5);\n    const now_month = now.getMonth();\n    const now_year = now.getFullYear();\n    var next_month_date; // const second_date_month = date\n\n    if (now.getMonth() == 11) {\n      next_month_date = new Date(now.getFullYear() + 1, 0, 1);\n    } else {\n      next_month_date = new Date(now.getFullYear(), now.getMonth() + 1, 1);\n    }\n\n    const next_month_month = next_month_date.getMonth();\n    const next_month_year = next_month_date.getFullYear();\n    this.setState({\n      startDate: `${now_year}-${now_month + 1}-01`\n    });\n    this.setState({\n      endDate: `${next_month_year}-${next_month_month + 1}-01`\n    });\n  }\n\n  render() {\n    const rendered_list = this.state.entryList;\n    const start_date = this.state.startDate;\n    const end_date = this.state.endDate;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app_body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(ChangeDateButtons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(EntriesLog, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, console.log(rendered_list), console.log(\"start\" + start_date), console.log(\"end\" + end_date), rendered_list.filter(function (list) {\n      return list.date >= start_date && list.date < end_date;\n    }).map(entry => /*#__PURE__*/React.createElement(EntryItem, {\n      entry_type: entry.entry_type,\n      description: entry.description,\n      category: entry.category,\n      date: entry.date,\n      amount: entry.amount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport { AppBody };","map":{"version":3,"sources":["/home/nicocaste/projects-web/budget-tracker1.1/TheRealBudgetTracker/BudgetTracker/frontend/src/Components/AppBody.js"],"names":["React","useState","EntriesLog","EntryItem","ChangeDateButtons","axios","AppBody","Component","constructor","props","refreshList","get","then","res","setState","entryList","data","catch","err","console","log","state","modal","startDate","endDate","activeItem","title","description","completed","componentDidMount","getDates","now","Date","now_month","getMonth","now_year","getFullYear","next_month_date","next_month_month","next_month_year","render","rendered_list","start_date","end_date","filter","list","date","map","entry","entry_type","category","amount"],"mappings":"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","sourcesContent":["import React,  { useState } from \"react\";\n\nimport {EntriesLog, EntryItem} from './EntriesLog';\nimport {ChangeDateButtons} from \"./ChangeDateButtons\";\n\n// the api rest framework\nimport axios from \"axios\";\n\nclass AppBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      entryList: [],\n      modal: false,\n      startDate:\"\",\n      endDate:\"\",\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false,\n      },\n    };\n    // this.date= new Date()\n  }\n\n// const entry_list = []\n\n  // we set this in order to render the component \n  componentDidMount() {\n    this.getDates();\n    this.refreshList();\n    console.log(\"rendering list\")\n  }\n\n  // componentNeedsUpdate\n\n\n\n  refreshList = () => {\n\n    axios\n    .get(\"/api/entries/\")\n    .then((res) => { \n      this.setState({entryList: res.data})\n    })\n    .catch((err) => console.log(err));\n  }\n\n  getDates() {\n    const now = new Date(2021,6,5)\n    const now_month = now.getMonth()\n    const now_year = now.getFullYear()\n    var next_month_date\n    // const second_date_month = date\n    if (now.getMonth() == 11) {\n      next_month_date = new Date(now.getFullYear() + 1, 0, 1);\n    } else {\n      next_month_date = new Date(now.getFullYear(), now.getMonth() + 1, 1);\n    }\n    const next_month_month = next_month_date.getMonth()\n    const next_month_year = next_month_date.getFullYear()\n\n    this.setState({startDate:`${now_year}-${now_month+1}-01`})\n    this.setState({endDate:`${next_month_year}-${next_month_month+1}-01`})\n\n\n\n  }\n  \n\n\n  render() {\n    \n    const rendered_list = this.state.entryList\n    const start_date = this.state.startDate\n    const end_date = this.state.endDate\n\n    return (\n    <div className=\"app_body\">\n      \n      \n      \n      <ChangeDateButtons/>\n\n      <EntriesLog>\n        {console.log(rendered_list)}\n        {console.log(\"start\"+start_date)}\n        {console.log(\"end\"+end_date)}\n\n        {rendered_list\n          .filter(function (list) {\n            return list.date >= start_date  && list.date < end_date\n          })\n          .map(\n            (entry) => (\n              <EntryItem\n                entry_type={entry.entry_type}\n                description={entry.description}\n                category={entry.category}\n                date={entry.date}\n                amount={entry.amount}\n              />\n          )\n        )}\n\n      </EntriesLog>\n    </div>\n    )\n  }\n\n\n\n}\n\nexport {AppBody};"]},"metadata":{},"sourceType":"module"}