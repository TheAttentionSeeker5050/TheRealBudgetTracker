{"ast":null,"code":"var _jsxFileName = \"/home/nicocaste/projects-web/budget-tracker1.1/TheRealBudgetTracker/BudgetTracker/frontend/src/Components/AppBody.js\";\nimport React, { useState } from \"react\";\nimport { EntriesLog, EntryItem } from './EntriesLog';\nimport { ChangeDateButtons } from \"./ChangeDateButtons\";\nimport \"../Static/Styles/log.css\"; // the api rest framework\n\nimport axios from \"axios\";\n\nclass AppBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshList = () => {\n      axios.get(\"/api/entries/\").then(res => {\n        this.setState({\n          entryList: res.data\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.renderItems = () => {\n      // we have the dates\n      const start_date = this.state.startDate; //  `2021-00-1`// \n\n      const end_date = this.state.endDate; // `2022-01-1` // this.state.endDate //\n\n      console.log(this.state.startDate);\n      console.log(this.state.endDate);\n      const filteredList = this.state.entryList.filter(function (list) {\n        // console.log(list.date >= start_date  && list.date < end_date)\n        console.log(start_date);\n        return list.date >= start_date && list.date < end_date;\n      });\n      console.log(filteredList);\n      console.log(\"after filter\");\n      return filteredList.map(entry => /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"log_table_item_row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, entry.entry_type), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, entry.description), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, entry.category), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }, entry.date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, \"$\", entry.amount)));\n    };\n\n    this.state = {\n      entryList: [],\n      modal: false,\n      startDate: \"\",\n      endDate: \"\",\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false\n      }\n    }; // this.date= new Date()\n  } // const entry_list = []\n  // we set this in order to render the component \n\n\n  componentDidMount() {\n    this.getDates(2021, 6);\n    console.log(\"got dates\");\n    this.refreshList();\n    console.log(\"refreshed list\");\n    console.log(\"rendering list\");\n  } // componentNeedsUpdate\n\n\n  getDates() {\n    let year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!month && !year) {\n      const now = new Date();\n      var now_month = now.getMonth();\n      var now_year = now.getFullYear();\n      var next_month_date;\n    } else {\n      // if there are parameters in this function\n      var now_month = month;\n      var now_year = year;\n      var next_month_date;\n    } // this is the logic for next month\n\n\n    if (now_month == 11) {\n      next_month_date = new Date(now_year + 1, 0, 1);\n    } else {\n      next_month_date = new Date(now_year, now_month + 1, 1);\n    }\n\n    var next_month_month = next_month_date.getMonth();\n    var next_month_year = next_month_date.getFullYear(); // we put a 0 in front of the month number just to make sure the filter fits\n\n    if (now_month >= 9) {\n      this.setState({\n        startDate: `${now_year}-${now_month + 1}-01`\n      });\n    } else {\n      this.setState({\n        startDate: `${now_year}-0${now_month + 1}-01`\n      });\n    } // we put a 0 in front of the month number just to make sure the filter fits\n\n\n    if (next_month_month >= 9) {\n      this.setState({\n        endDate: `${next_month_year}-${next_month_month + 1}-01`\n      });\n    } else {\n      this.setState({\n        endDate: `${next_month_year}-0${next_month_month + 1}-01`\n      });\n    }\n  }\n\n  render() {\n    // const rendered_list = this.state.entryList\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app_body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(ChangeDateButtons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table_div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-hover table-stripped\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      className: \"log_table_item_head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, \"Entry type\"), /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, \"Amount\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, this.renderItems()))));\n  }\n\n}\n\nexport { AppBody };","map":{"version":3,"sources":["/home/nicocaste/projects-web/budget-tracker1.1/TheRealBudgetTracker/BudgetTracker/frontend/src/Components/AppBody.js"],"names":["React","useState","EntriesLog","EntryItem","ChangeDateButtons","axios","AppBody","Component","constructor","props","refreshList","get","then","res","setState","entryList","data","catch","err","console","log","renderItems","start_date","state","startDate","end_date","endDate","filteredList","filter","list","date","map","entry","entry_type","description","category","amount","modal","activeItem","title","completed","componentDidMount","getDates","year","month","now","Date","now_month","getMonth","now_year","getFullYear","next_month_date","next_month_month","next_month_year","render"],"mappings":"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","sourcesContent":["import React,  { useState } from \"react\";\n\nimport {EntriesLog, EntryItem} from './EntriesLog';\nimport {ChangeDateButtons} from \"./ChangeDateButtons\";\n\nimport \"../Static/Styles/log.css\";\n\n// the api rest framework\nimport axios from \"axios\";\n\nclass AppBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      entryList: [],\n      modal: false,\n      startDate:\"\",\n      endDate:\"\",\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false,\n      },\n    };\n    // this.date= new Date()\n  }\n\n// const entry_list = []\n\n  // we set this in order to render the component \n  componentDidMount() {\n    this.getDates(2021,6);\n    console.log(\"got dates\")\n    this.refreshList();\n    console.log(\"refreshed list\")\n    console.log(\"rendering list\")\n  }\n\n  \n\n  // componentNeedsUpdate\n\n\n\n  refreshList = () => {\n\n    axios\n    .get(\"/api/entries/\")\n    .then((res) => { \n      this.setState({entryList: res.data})\n    })\n    .catch((err) => console.log(err));\n  }\n\n  getDates(year=null, month=null) {\n    if (!month && !year) {\n\n      const now = new Date()\n      var now_month = now.getMonth()\n      var now_year = now.getFullYear()\n      var next_month_date\n\n    } else {\n      // if there are parameters in this function\n      var now_month = month\n      var now_year = year\n      var next_month_date\n\n\n    }\n\n    // this is the logic for next month\n    if (now_month == 11) {\n      next_month_date = new Date(now_year + 1, 0, 1);\n    } else {\n      next_month_date = new Date(now_year, now_month + 1, 1);\n    }\n    var next_month_month = next_month_date.getMonth()\n    var next_month_year = next_month_date.getFullYear()\n    \n    // we put a 0 in front of the month number just to make sure the filter fits\n    if (now_month >= 9){\n      this.setState({startDate:`${now_year}-${now_month+1}-01`})\n    } else {\n      this.setState({startDate:`${now_year}-0${now_month+1}-01`})\n    }\n\n    // we put a 0 in front of the month number just to make sure the filter fits\n    if (next_month_month>=9) {\n      this.setState({endDate:`${next_month_year}-${next_month_month+1}-01`})\n    } else {\n      this.setState({endDate:`${next_month_year}-0${next_month_month+1}-01`})\n\n    }\n  }\n  \n  renderItems = () => {\n    // we have the dates\n    const start_date = this.state.startDate //  `2021-00-1`// \n    const end_date = this.state.endDate // `2022-01-1` // this.state.endDate //\n\n\n    console.log(this.state.startDate)\n\n    console.log(this.state.endDate)\n\n    const filteredList = this.state.entryList.filter(function (list) {\n      // console.log(list.date >= start_date  && list.date < end_date)\n      console.log(start_date)\n      return list.date >= start_date  && list.date < end_date\n    })\n\n    console.log(filteredList)\n    console.log(\"after filter\")\n    \n    \n\n\n    return filteredList.map(\n      (entry) => (\n        \n        <tr className=\"log_table_item_row\">\n          <td>\n            {entry.entry_type}\n          </td>\n          <td >{entry.description}</td>\n          <td>{entry.category}</td>\n          <td>{entry.date}</td>\n          <td>${entry.amount}</td>\n\n        </tr>\n    )\n  )\n  }\n\n\n  render() {\n    \n    // const rendered_list = this.state.entryList\n    \n\n    return (\n    <div className=\"app_body\">\n      \n      \n      \n      <ChangeDateButtons/>\n      <div className=\"table_div\">\n            <table className=\"table table-hover table-stripped\">\n                <thead>\n                    <tr className=\"log_table_item_head\">\n                        <th scope=\"col\">Entry type</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Category</th>\n                        <th scope=\"col\">Date</th>\n                        <th scope=\"col\">Amount</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                  {this.renderItems()}\n                </tbody>\n                </table>\n            \n            </div>\n      {/* <EntriesLog>\n        {console.log(rendered_list)}\n        {console.log(\"start: \"+start_date)}\n        {console.log(\"end: \"+end_date)}\n\n\n      </EntriesLog> */}\n    </div>\n    )\n  }\n\n\n\n}\n\nexport {AppBody};"]},"metadata":{},"sourceType":"module"}